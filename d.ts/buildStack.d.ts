
// buildStack() gathers information about current stackframes/scopes
// structured as follows (using nested named lists):

import { DebugProtocol } from './DebugProtocol';

import { LazyTree } from './lazyTree';

import { RValue, REnvironment, RFunction, RCall, RNULL, RList, RVector } from './RTypes';


export declare module StackTree {
	
	
	interface Content extends LazyTree.Content {
		// The types of content present
		nodeType: ('Stack'|'Frame'|'Scope'|'Variable');
	}
	
	interface ChildrenArgs extends LazyTree.ChildrenArgs {
		// Type of content in children nodes (same as content types)
		nodeType: ('Stack'|'Frame'|'Scope'|'Variable');
	}
	
	interface ContentArgs extends LazyTree.ContentArgs {
		// Type of content in children nodes 
		nodeType: ('Stack'|'Frame'|'Scope'|'Variable');
	}
	
	interface Source extends DebugProtocol.Source {
		// used to uniquely identify a source
		path: string;

		// not present in DAP source, but e.g. in DebugProtocol.StackFrame
		line: number;
		endLine: number;
		column: number;
		endColumn: number;
		// the entire source body, used to show anonymous functions as pseudo-file
		srcbody: string;
		isFile: boolean;
	}
	
	
	interface Stack extends Content {
		totalFrames?: number,
		// stackFrames is added later
	}
	
	interface StackFrame extends DebugProtocol.StackFrame, Content {
		// set name = '' + id
		variablesReference: number;
		frameIdR: number;
	}
	
	interface Scope extends DebugProtocol.Scope, Content {
		name: string;
		rValue: REnvironment;
		variablesReference: number;
		setInfo?: SetInfo; // sensible here?
	}
	
	interface SetInfo {
		setter?: RValue, // e.g. quote(v[1,]), sufficient for non-root elements
		
		expression?: RValue; //only required for root element
		environment?: REnvironment; // only required for root element
	}
	
	interface Variable extends MinimalVariable, DebugProtocol.Variable, Content {
		name: string;
		value: string;
		type: string;
		evaluateName: string;
		
		setter?: RValue;
		setInfo?: SetInfo;
		
		hasChildren: boolean;
		rValue: RValue;
		
		variablesReference: number;
	}
	
	interface MinimalVariable {
		name: string;
		rValue: RValue;
		
		setter?: RValue;
		setInfo?: SetInfo;
	}

	function getSource(call?: RCall, frameIdR?: number): Source;
	
	
	function _vsc_buildStack(): LazyTree.NodeId;
	
	
	function buildStack(args: stackArgs): {
		contentContent: Stack;
		childrenArgs: FramesArgs;
	};
	function gatherFrames(args: FramesArgs): {
		contentArgs: FrameArgs;
		// childrenArgs: ScopesArgs; // generated by buildFrame()
	}[]
	
	function buildFrame(args: FrameArgs): {
		contentContent: StackFrame;
		childrenArgs: ScopesArgs;
	}
	
	function gatherScopes(args: ScopesArgs): {
		contentArgs: ScopeArgs;
		// childrenArgs: VariablesArgs; // generated by buildVariable()
	}[]
	
	function buildVariable(args: VariableArgs): {
		contentContent: Variable;
		childrenArgs: VariablesArgs;
	};
	function gatherVariables(args: VariablesArgs): {
		contentArgs: VariableArgs;
		// childrenArgs: VariablesArgs; // generated by buildVariable()
	}[]
	
	
	interface stackArgs extends ContentArgs, FramesArgs {
	}
	
	interface FramesArgs extends ChildrenArgs {
		topFrameId: number;
		skipFromTop?: number;
		skipFromBottom?: number;
		isError: boolean;
		forceDummyStack?: boolean;
		dummyFile?: string;
	}
	
	interface FrameArgs extends ContentArgs {
		frameIdR: number;
		frameIdVsc: number;
		dummyFile?: string;
		isDummyFrame?: boolean;
	}
	
	interface ScopesArgs extends ChildrenArgs {
		firstenv: REnvironment;
		lastenv: REnvironment;
	}
	
	interface VariableArgs extends ContentArgs {
		minVar: MinimalVariable;
	}
	
	interface ScopeArgs extends VariableArgs {
	}
	
	interface VariablesArgs extends ChildrenArgs {
		rValue: RValue;
	}
	
}