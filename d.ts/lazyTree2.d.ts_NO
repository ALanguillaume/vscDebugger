


import { RValue, RFunction, RCall, RNULL, RList, RVector } from './RTypes';
import { DebugProtocol } from './DebugProtocol';

export declare module StackTree {

	class REnvironment {}

	interface SetInfo {
		setter?: RValue, // e.g. quote(v[1,]), sufficient for non-root elements
		expression?: RValue; //only required for root element
		environment?: REnvironment; // only required for root element
	}
	

	// used to output tree in human-readable form
	interface NestedList {
		contentContent: Content;
		childrenChildren: NestedList[];
	}


	class Tree extends REnvironment {
		rootNode?: MetaNode;
		
	}

	interface GetChildrenArgs {
		refresh?: boolean;
	}
	interface GetVariablesArgs extends GetChildrenArgs {
		filter?: 'indexed'|'named';
		start?: number;
		count?: number;
	}
	interface GetScopesArgs extends GetVariablesArgs {}
	interface GetFramesArgs extends GetChildrenArgs {
		startFrame?: number;
		levels?: number;
	}


	interface GetContentArgs {
		refresh?: boolean;
	}
	interface GetVariableArgs extends GetContentArgs {}
	interface GetScopeArgs extends GetContentArgs {}
	interface GetFrameArgs extends GetContentArgs {}
	interface GetStackArgs extends GetContentArgs {}

	interface Content {}
	interface VariableContent extends Content {}
	interface ScopeContent extends VariableContent {
		name: string;
		rValue: REnvironment;
		variablesReference: number;
		setInfo?: SetInfo; // sensible here?
	}
	interface FrameContent extends Content, DebugProtocol.Scope {
	}
	interface StackContent extends Content {
		totalFrames?: number;
	}

	interface MakeContentArgs {}
	interface MakeVariableArgs extends MakeContentArgs {}
	interface MakeScopeArgs extends MakeContentArgs {}
	interface MakeFrameArgs extends MakeContentArgs {}
	interface MakeStackArgs extends MakeContentArgs {}

	interface MakeChildrenArgs {}
	interface MakeVariablesArgs extends MakeChildrenArgs {}
	interface MakeScopesArgs extends MakeChildrenArgs {}
	interface MakeFramesArgs extends MakeChildrenArgs {}

	type NodeId = number;
	type NodeType = "Meta"|"Stack"|"Scope"|"Variable";


	// type childNodeType<"Stack"> = "Scope";

	class Node extends REnvironment {
		
		nodeId: NodeId;
		nodeType: NodeType;
		childNodeType: NodeType;
		childIndex?: number; // as used by parent node

		asList(): NestedList;

		getChildren(args: GetChildrenArgs): Node[];

		getContent(args: GetContentArgs): Content;
		content?: Content
		contentArgs?: MakeContentArgs

		childrenArgs?: MakeChildrenArgs
		children?: Node[];
		childIndices?: number[];

		static makechildren(args: MakeChildrenArgs): Node[];
	}

	class MetaNode extends Node {


	}

	class StackNode extends Node {
		static makeChildren(args: MakeFramesArgs): FrameNode[];
		getChildren(args: GetFramesArgs): FrameNode[];
		children?: FrameNode[];
		childrenArgs?: MakeFramesArgs;

		static makeContent(args: MakeFramesArgs): StackContent;
		getContent(args: GetFramesArgs): StackContent;
		content?: StackContent;
		contentArgs: MakeStackArgs;
	}

	class FrameNode extends Node {
		static makeChildren(args: MakeScopesArgs): ScopeNode[];
		getChildren(args: GetScopesArgs): ScopeNode[];
		children?: ScopeNode[];
		childrenArgs?: MakeScopesArgs;

		static makeContent(args: MakeFrameArgs): FrameContent;
		getContent(args: GetFrameArgs): FrameContent;
		content?: FrameContent;
		contentArgs: MakeFrameArgs;
	}

	class VariableNode extends Node {
		static makeChildren(args: MakeVariablesArgs): VariableNode[];
		getChildren(args: GetVariablesArgs): VariableNode[];
		children?: VariableNode[];
		childrenArgs?: MakeVariablesArgs;

		static makeContent(args: MakeVariableArgs): VariableContent;
		getContent(args: GetVariableArgs): VariableContent;
		content?: VariableContent;
		contentArgs: MakeVariableArgs;
	}

	class ScopeNode extends Node {
		static makeChildren(args: MakeVariablesArgs): VariableNode[];
		getChildren(args: GetVariablesArgs): VariableNode[];
		children?: VariableNode[];
		childrenArgs?: MakeVariablesArgs;

		static makeContent(args: MakeScopeArgs): ScopeContent
		getContent(args: GetScopeArgs): ScopeContent;
		content?: ScopeContent;
		contentArgs: MakeScopeArgs;
	}
}

