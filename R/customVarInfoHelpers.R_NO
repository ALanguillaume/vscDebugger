


addVarInfo <- function(varInfo, position=NULL, testCase=NULL){
  # use position from varInfo, if none supplied
  # might still be NULL
  if(is.null(position)){
    position <- varInfo$position
  }

  varInfos <- session$varInfos

  # handle position
  if(is.null(position)){
    position <- length(varInfos)
  } else if (position < 0) {
    # negative positions count from the end, -1 = last position
    position <- length(varInfos) + 1 + position
  } else if (position > 0) {
    position <- position - 1 # position 1 == insert after 0
  }
  

  # check if VarInfo is ok
  varInfoOk <- checkVarInfo(varInfo, testCase)

  if(varInfoOk){
    varInfos <- append(varInfos, varInfo, position)
  } else{
    stop(paste0('Invalid VarInfo: ', varInfo$name))
  }

  session$varInfos <- varInfos

  return(varInfos)
}




checkVarInfo <- function(varInfo, testCase){
  name <- varInfo$name
  doesApply <- varInfo$doesApply(testCase)
  childVars <- applyIfFunction(varInfo$childVars, testCase)
  nChildVars <- applyIfFunction(varInfo$nChildVars, testCase)
  customAttributes <- applyIfFunction(varInfo$customAttributes, testCase)
  internalAttributes <- applyIfFunction(varInfo$internalAttributes, testCase)
  toString <- applyIfFunction(varInfo$toString, testCase)
  type <- applyIfFunction(varInfo$type, testCase)
  evaluateName <- applyIfFunction(varInfo$evaluateName, testCase)


}

isString <- function(value, allowNull=TRUE){
  if(is.null(value) && !allowNull){
    FALSE
  } else{
    is.atomic(value) && is.character(value) && length(value)==1
  }
}


isChildVars <- function(value, allowNull=TRUE){
  if(is.null(value) && !allowNull){
    FALSE
  } else{
    all(sapply(value, function(val){
      isString(val$name, FALSE) &&
      rValue %in% names(val) &&
    }))
  }
}

isSetInfo <- function(value, allowNull=TRUE){
  if(is.null(value) && !allowNull){
    FALSE
  } else{
    is.list(value) &&
    isString(value$name, FALSE) &&
    "rValue" %in% names(value)

  }
}



applyIfFunction <- function(funcOrValue, arg){
  if(is.function(funcOrValue)){
    funcOrValue(arg)
  } else{
    funcOrValue
  }
}

